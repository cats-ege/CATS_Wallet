<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CATS Wallet</title>
    <text>⚠️your private key is the only way you can recover your wallet. And,</text>
   
<text>if your wallet doesn't appear, try refreshing the page</text> 
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background-color: #f5f5f5;
            margin: 0;
            padding: 20px;
            color: #333;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background-color: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        h1 {
            text-align: center;
            color: #2c3e50;
        }
        .wallet-info {
            margin-bottom: 20px;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 8px;
        }
        .section {
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid #eee;
        }
        input, button {
            padding: 10px;
            margin: 5px;
            border-radius: 5px;
            border: 1px solid #ddd;
        }
        input {
            width: 100%;
            box-sizing: border-box;
        }
        button {
            background-color: #3498db;
            color: white;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #2980b9;
        }
        .result {
            margin-top: 10px;
            padding: 10px;
            background-color: #e8f4f8;
            border-radius: 5px;
            display: none;
        }
        #walletAddress, #balance {
            font-weight: bold;
            overflow-wrap: break-word;
        }
        .loader {
            border: 5px solid #f3f3f3;
            border-top: 5px solid #3498db;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 10px auto;
            display: none;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .cat-logo {
            filter: drop-shadow(0px 2px 3px rgba(0,0,0,0.2));
            transition: transform 0.3s ease;
        }
        .cat-logo:hover {
            transform: scale(1.1);
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>CATS 블록체인 지갑</h1>

        <div class="section">
            <h2>내 지갑</h2>
            <div class="wallet-info">
                <h3>지갑 주소:</h3>
                <p id="walletAddress">아직 지갑이 없습니다</p>
                <h3>개인 키:</h3>
                <p id="privateKeyDisplay">지갑이 없습니다</p>
                <h3>잔액:</h3>
                <div style="display: flex; align-items: center; gap: 10px;">
                    <p id="balance">0 CAT</p>
                    <svg width="32" height="32" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg" class="cat-logo">
                        <circle cx="32" cy="32" r="30" fill="#3498db" />
                        <path d="M20 48C24 52 40 52 44 48" stroke="white" stroke-width="2.5" stroke-linecap="round" />
                        <path d="M16 24L24 32M48 24L40 32" stroke="white" stroke-width="2.5" stroke-linecap="round" />
                        <path d="M22 36C22 36 26 40 32 40C38 40 42 36 42 36" stroke="white" stroke-width="2.5" stroke-linecap="round" />
                        <ellipse cx="24" cy="28" rx="4" ry="4" fill="white" />
                        <ellipse cx="40" cy="28" rx="4" ry="4" fill="white" />
                    </svg>
                </div>
            </div>

            <button onclick="createWallet()">지갑 생성</button>
            <div style="margin-top: 15px;">
                <input type="text" id="privateKey" placeholder="개인 키 입력 후 복구">
                <button onclick="restoreWallet()">지갑 복구</button>
            </div>
        </div>

        <div class="section">
            <h2>송금</h2>
            <input type="text" id="recipient" placeholder="받는 사람 주소">
            <input type="number" id="amount" placeholder="송금할 CAT" min="0.1" step="0.1">
            <button onclick="sendTransaction()">송금하기</button>
            <div id="txResult" class="result"></div>
        </div>

        <div class="section">
            <h2>채굴</h2>
            <p>블록을 채굴하여 CATS 코인을 얻으세요!</p>
            <button onclick="mine()">채굴하기</button>
            <div id="mineLoader" class="loader"></div>
            <div id="mineResult" class="result"></div>
        </div>

        <div class="section">
            <h2>토큰 발행</h2>
            <input type="text" id="tokenName" placeholder="토큰 이름">
            <input type="number" id="tokenAmount" placeholder="발행할 양" min="1" step="1">
            <button onclick="issueToken()">토큰 발행</button>
            <div id="tokenResult" class="result"></div>
        </div>
    </div>

    <script>
        let currentWallet = null;

        // 페이지 로드 시 로컬 스토리지에서 지갑 정보 가져오기
        window.onload = function() {
            const savedWallet = localStorage.getItem('catWallet');
            if (savedWallet) {
                currentWallet = JSON.parse(savedWallet);
                document.getElementById('walletAddress').innerText = currentWallet.address;
                document.getElementById('privateKeyDisplay').innerText = currentWallet.private_key;
                updateBalance();
            }
        }

        // 지갑 생성
        function createWallet() {
            fetch('http://127.0.0.1:5000/create_wallet')

                .then(response => response.json())
                .then(data => {
                    currentWallet = data;
                    document.getElementById('walletAddress').innerText = data.address;
                    document.getElementById('privateKeyDisplay').innerText = data.private_key;

                    // 로컬 스토리지에 지갑 정보 저장
                    localStorage.setItem('catWallet', JSON.stringify(data));

                    alert('새 지갑이 생성되었습니다!\n개인 키: ' + data.private_key + '\n\n이 키를 안전하게 보관하세요!');
                    updateBalance();
                })
                .catch(error => {
                    console.error('Error creating wallet:', error);
                });
        }

        // 지갑 복구
        function restoreWallet() {
            const privateKey = document.getElementById('privateKey').value.trim();
            if (!privateKey) {
                alert('개인 키를 입력하세요');
                return;
            }

            fetch('http://127.0.0.1:5000/recover_wallet', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ private_key: privateKey })
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    alert('오류: ' + data.error);
                    return;
                }

                currentWallet = {
                    address: data.address,
                    private_key: privateKey
                };

                document.getElementById('walletAddress').innerText = data.address;
                document.getElementById('privateKeyDisplay').innerText = privateKey;
                document.getElementById('privateKey').value = '';

                // 로컬 스토리지에 지갑 정보 저장
                localStorage.setItem('catWallet', JSON.stringify(currentWallet));

                alert('지갑이 복구되었습니다!');
                updateBalance();
            })
            .catch(error => {
                console.error('Error recovering wallet:', error);
                alert('지갑 복구 중 오류가 발생했습니다');
            });
        }

        // 잔액 업데이트
        function updateBalance() {
            if (!currentWallet) return;

            const walletAddress = currentWallet.address;
            
            // 캐시 방지를 위한 랜덤 파라미터 추가
            const timestamp = new Date().getTime();
            fetch(`http://127.0.0.1:5000/balance/${walletAddress}?t=${timestamp}`)
                .then(response => {
                    if (!response.ok) {
                        console.error('Network response status:', response.status);
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data && data.balance !== undefined) {
                        const prevBalance = document.getElementById("balance").innerText;
                        const newBalanceText = data.balance.toFixed(2) + " CAT";
                        
                        document.getElementById("balance").innerText = newBalanceText;
                        // 잔액 업데이트 시 로고 애니메이션
                        const logo = document.querySelector('.cat-logo');
                        logo.style.transition = 'transform 0.5s ease';
                        logo.style.transform = 'scale(1.2)';
                        setTimeout(() => {
                            logo.style.transform = 'scale(1)';
                        }, 500);
                        console.log(`잔액 업데이트: ${prevBalance} → ${newBalanceText}`);
                    } else {
                        document.getElementById("balance").innerText = "0 CAT";
                    }
                })
                .catch(error => {
                    console.error('잔액 조회 오류:', error);
                    document.getElementById("balance").innerText = "잔액 조회 실패";
                });
        }

        // 송금
        function sendTransaction() {
            if (!currentWallet) {
                alert('먼저 지갑을 생성하거나 복구하세요');
                return;
            }

            const recipient = document.getElementById('recipient').value.trim();
            const amount = parseFloat(document.getElementById('amount').value);

            if (!recipient || recipient.length < 5) {
                alert('유효한 수신자 주소를 입력하세요');
                return;
            }

            if (isNaN(amount) || amount <= 0) {
                alert('유효한 금액을 입력하세요');
                return;
            }

            const txData = {
                sender: currentWallet.address,
                recipient: recipient,
                amount: amount
            };

            fetch('http://127.0.0.1:5000/transactions/new', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(txData)
            })
            .then(response => response.json())
            .then(data => {
                const resultDiv = document.getElementById('txResult');
                resultDiv.style.display = 'block';

                if (data.error) {
                    resultDiv.innerText = '오류: ' + data.error;
                    resultDiv.style.backgroundColor = '#ffebee';
                } else {
                    resultDiv.innerText = '송금 성공! ' + recipient + '에게 ' + amount + ' CAT 전송됨';
                    resultDiv.style.backgroundColor = '#e8f5e9';
                    
                    // 서버에서 받은 새 잔액으로 즉시 UI 업데이트
                    if (data.new_balance !== undefined) {
                        document.getElementById('balance').innerText = data.new_balance.toFixed(2) + " CAT";
                        console.log("송금 후 새 잔액:", data.new_balance);
                    } else {
                        // 서버가 new_balance를 보내지 않은 경우, 수동으로 계산
                        const currentBalance = parseFloat(document.getElementById('balance').innerText);
                        const fee = amount * 0.001; // 수수료 0.1%
                        const totalDeduction = amount + fee;
                        const newBalance = currentBalance - totalDeduction;
                        document.getElementById('balance').innerText = newBalance.toFixed(2) + " CAT";
                        console.log("계산된 새 잔액:", newBalance);
                    }
                    
                    document.getElementById('recipient').value = '';
                    document.getElementById('amount').value = '';

                    // 서버에서 잔액 확인 (여러 번 시도하여 확실하게 업데이트)
                    setTimeout(updateBalance, 800);
                    setTimeout(updateBalance, 2000);
                    setTimeout(updateBalance, 3500);
                }
            })
            .catch(error => {
                console.error('Error sending transaction:', error);
                const resultDiv = document.getElementById('txResult');
                resultDiv.style.display = 'block';
                resultDiv.innerText = '송금 중 오류가 발생했습니다';
                resultDiv.style.backgroundColor = '#ffebee';
            });
        }

        // 채굴
        function mine() {
            if (!currentWallet) {
                alert('먼저 지갑을 생성하거나 복구하세요');
                return;
            }

            const loader = document.getElementById('mineLoader');
            const resultDiv = document.getElementById('mineResult');

            loader.style.display = 'block';
            resultDiv.style.display = 'none';

            fetch('http://127.0.0.1:5000/mine?address=' + currentWallet.address)
                .then(response => response.json())
                .then(data => {
                    loader.style.display = 'none';
                    resultDiv.style.display = 'block';

                    if (data.error) {
                        resultDiv.innerText = '채굴 오류: ' + data.error;
                        resultDiv.style.backgroundColor = '#ffebee';
                    } else {
                        resultDiv.innerText = '블록 #' + data.index + ' 채굴 성공! 10 CAT 보상 획득!';
                        resultDiv.style.backgroundColor = '#e8f5e9';

                        // 잠시 후 잔액 업데이트
                        setTimeout(updateBalance, 1000);
                    }
                })
                .catch(error => {
                    console.error('Error mining:', error);
                    loader.style.display = 'none';
                    resultDiv.style.display = 'block';
                    resultDiv.innerText = '채굴 중 오류가 발생했습니다';
                    resultDiv.style.backgroundColor = '#ffebee';
                });
        }

        // 토큰 발행
        function issueToken() {
            if (!currentWallet) {
                alert('먼저 지갑을 생성하거나 복구하세요');
                return;
            }

            const tokenName = document.getElementById('tokenName').value.trim();
            const amount = parseInt(document.getElementById('tokenAmount').value);

            if (!tokenName) {
                alert('토큰 이름을 입력하세요');
                return;
            }

            if (isNaN(amount) || amount <= 0) {
                alert('유효한 발행량을 입력하세요');
                return;
            }

            const tokenData = {
                address: currentWallet.address,
                token_name: tokenName,
                amount: amount
            };

            fetch('http://127.0.0.1:5000/issue_token', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(tokenData)
            })
            .then(response => response.json())
            .then(data => {
                const resultDiv = document.getElementById('tokenResult');
                resultDiv.style.display = 'block';

                if (data.error) {
                    resultDiv.innerText = '오류: ' + data.error;
                    resultDiv.style.backgroundColor = '#ffebee';
                } else {
                    resultDiv.innerText = data.message;
                    resultDiv.style.backgroundColor = '#e8f5e9';
                    document.getElementById('tokenName').value = '';
                    document.getElementById('tokenAmount').value = '';

                    // 잠시 후 잔액 업데이트
                    setTimeout(updateBalance, 1000);
                }
            })
            .catch(error => {
                console.error('Error issuing token:', error);
                const resultDiv = document.getElementById('tokenResult');
                resultDiv.style.display = 'block';
                resultDiv.innerText = '토큰 발행 중 오류가 발생했습니다';
                resultDiv.style.backgroundColor = '#ffebee';
            });
        }
    </script>
</body>
</html>
